#!/usr/bin/env python

import sys, os, csv
csv.field_size_limit(sys.maxsize)
    
overview_headers = ['text', 'title', 'url', 'id', 'tags']

def ask_question(question):
    while True:
        s = raw_input(question+' (y/n): ')
        if s == 'y' or s == 'Y':
            return True
        if s == 'n' or s == 'N':
            return False

def select_from_list(question, options):
    for i, option in enumerate(options):
        print '  '+str(i)+': '+option

    valid = False
    while not valid:
        s = raw_input(question+' '+str(range(len(options)))+' ')
        n = int(s)
        if n >= 0 and n < len(options):
            valid = True
    print ''
    return n

def define_headers(first_row):
    new_headers = []
    for col in first_row:
        s = raw_input('What is the header for this line?\nColumn: '+col+'\nHeader: ')
        new_headers.append(s)
        print ''
    print 'Here are the new headers:', new_headers
    return new_headers

def rename_headers(headers):
    new_headers = headers[:]

    while True:
        print 'Overview ignores all headers except these:', overview_headers
        print 'Here are your current headers:', new_headers
        print ''

        if ask_question('Would you like to rename any of your headers?'):
            n = select_from_list('Which header would you like to rename?', new_headers)
            s = raw_input('What should the new header be? ');
            new_headers[n] = s
            print ''

        else:
            return new_headers

def merge_columns(headers):
    merge_headers = []
    for i, header in enumerate(headers):
        merge_headers.append([i])
    
    while True:
        # build current list of columns
        columns = []
        for col in merge_headers:
            display = []
            for i in col:
                display.append(headers[i])
            columns.append(', '.join(display))


        print 'Overview ignores all headers except these:', overview_headers
        print 'Here are your current headers:', columns
        print ''

        option = select_from_list('Which would you like to do?', [
            'Merge a column into another column', 
            'Explode a merged column', 
            'All done']
        )

        # merge a column into another column
        if option == 0:
            base_col = select_from_list('Which column would you like to merge into?', columns)
            col = select_from_list('And which column would you like to merge?', columns)
            if base_col == col:
                print "Error: You can't merge a column into itself"
                print ''
            else:
                merge_headers[base_col].extend(merge_headers[col])
                merge_headers.pop(col)

        # explode a merged column
        elif option == 1:
            col = select_from_list('Which column would you like to explode?', columns)
            if len(merge_headers[col]) == 1:
                print "Error: That column only has one value already"
                print ''
            else:
                for val in merge_headers[col]:
                    merge_headers.append([val])
                merge_headers.pop(col)

        # all done
        else:
            return merge_headers

def write_csv(has_headers, headers, merge, input_filename, output_filename, escape_quotes):
    print 'Input csv already have headers?', has_headers
    print 'Here are the headers:', headers
    print 'Here is the merge data:', merge
    print ''

    # open file for writing
    out_file = open(output_filename, 'wb')
    writer = csv.writer(out_file)

    # write the headers
    final_headers = []
    for col in merge:
        final_headers.append(headers[col[0]])
    writer.writerow(final_headers)

    # open file for reading
    if escape_quotes:
        doublequote = False
        escapechar = '\\'
    else:
        doublequote = True
        escapechar = None
    in_file = open(input_filename, 'rb')
    reader = csv.reader(in_file, doublequote=doublequote, escapechar=escapechar)
    
    row_num = 0
    first = True
    for in_row in reader:
        # if the input csv has headers, skip the first row
        if has_headers and first:
            first = False
            continue
        
        try:
            # process the row into something that can be written
            out_row = []
            for col in merge:
                if len(col) == 1:
                    out_row.append(in_row[col[0]])
                else:
                    val = ''
                    for i in col:
                        val += headers[i]+':\n'
                        val += in_row[i]+'\n\n'
                    out_row.append(val)

            # write the row
            writer.writerow(out_row)
            sys.stdout.write('\rWriting row #'+str(row_num))
            row_num += 1
        except:
            print 'Ack, something went wrong on row '+str(row_num)+'. The input row has '+str(len(in_row))+' columns.'

    print '\n'
    print 'CSV file written: '+output_filename

if __name__ == '__main__':
    # arguments
    if len(sys.argv) < 3:
        print 'Usage:', sys.argv[0], 'input.csv output.csv [--escape_quotes]'
        print '  The input and output CSV filenames are required.'
        print '  Add --escape_quotes if the input CSV contains quotes escaped like \'\\"\' instead of \'""\''
        sys.exit()
    
    # validate filename
    input_filename = sys.argv[1]
    output_filename = sys.argv[2]
    if not os.path.isfile(input_filename):
        print input_filename, 'is not a file'
        sys.exit()

    # escape quotes?
    escape_quotes = ('--escape-quotes' in sys.argv)

    # welcome
    print 'Welcome to CSV Prep, a tool to help you format your CSV for importing into Overview.\n'
    
    # is first line header?
    f = open(input_filename, 'rb')
    reader = csv.reader(f)
    first_row = reader.next()
    
    print first_row
    has_headers = ask_question('Was that a list of CSV headers?')
    print ''

    if has_headers:
        headers = first_row
    else:
        headers = define_headers(first_row)
        while not ask_question('Are these headers good?'):
            headers = define_headers(first_row)
        print ''
    
    # rename headers step
    headers = rename_headers(headers)
    print ''

    # merge columns step
    merge_headers = merge_columns(headers)
    print ''

    # write the output csv
    write_csv(has_headers, headers, merge_headers, input_filename, output_filename, escape_quotes)

